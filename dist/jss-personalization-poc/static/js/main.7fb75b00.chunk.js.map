{"version":3,"sources":["components/ContentBlock/index.js","components/Footer/index.js","components/Hero/index.js","components/NavBar/index.js","components/ThreeCards/index.js","temp/componentFactory.js","lib/SitecoreContextFactory.js","dataFetcher.js","Layout.js","NotFound.js","RouteHandler.js","AppRoot.js","index.js","i18n.js","lib/GraphQLClientFactory.js","temp/config.js"],"names":["ContentBlock","_ref","fields","react_default","a","createElement","Fragment","dist","tag","className","field","heading","content","Footer","props","href","Hero","role","jumbotronHeading","leadText","NavBar","id","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","ThreeCards","thumbnail","editable","height","width","data-sample","components","Map","componentFactory","componentName","get","set","SitecoreContextFactory","dataFetcher","url","data","axios","method","withCredentials","Layout","route","Helmet_default","pageTitle","value","name","rendering","NotFound","_ref$context","context","site","language","ssrInitialState","RouteHandler","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","notFound","routeData","defaultLanguage","config","sitecore","setSitecoreContext","objectSpread","itemId","window","componentIsMounted","languageIsChanging","updateLanguage","updateRouteData","_this2","sitecoreRoutePath","match","params","sitecoreRoute","startsWith","concat","fetchOptions","layoutServiceConfig","host","sitecoreApiHost","querystringParams","sc_lang","sc_apikey","sitecoreApiKey","fetcher","dataApi","fetchRouteData","catch","error","response","status","console","getRouteData","lang","then","setState","_this3","newLanguage","i18n","changeLanguage","forceUpdate","previousProps","existingRoute","newRoute","isExperienceEditorActive","location","assign","_this$state","t","src_NotFound","src_Layout","React","Component","routePatterns","AppRoot","path","Router","graphQLClient","routeRenderFunction","RouteHandler_RouteHandler","react_apollo_browser_umd","client","contextFactory","Switch","map","routePattern","Route","key","render","renderFunction","ReactDOM","__JSS_STATE__","ssrRawJson","document","getElementById","JSON","parse","innerHTML","hydrate","dictionary","initialGraphQLState","APOLLO_STATE","endpoint","ssr","initialCacheState","link","createPersistedQueryLink","BatchHttpLink","uri","credentials","cache","InMemoryCache","fragmentMatcher","IntrospectionFragmentMatcher","introspectionQueryResultData","ApolloClient","ssrMode","ssrForceFetchDelay","restore","GraphQLClientFactory","graphQLEndpoint","Promise","resolve","reject","options","debug","lng","fallbackLng","load","useCookie","interpolation","escapeValue","resources","translation","use","reactI18nextModule","init","dictionaryServicePath","jssAppName","backend","loadPath","parsedData","phrases","fetchBackend","rootElement","src_AppRoot","pathname","BrowserRouter","module","exports","graphQLEndpointPath"],"mappings":"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","file":"static/js/main.7fb75b00.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Text, RichText } from '@sitecore-jss/sitecore-jss-react';\r\n\r\nconst ContentBlock = ({ fields }) => (\r\n  <React.Fragment>\r\n    Content Block\r\n    <Text tag=\"h2\" className=\"display-4\" field={fields.heading} />\r\n    <RichText className=\"contentDescription\" field={fields.content} />\r\n  </React.Fragment>\r\n\r\n// - componentName: ContentBlock\r\n// fields:\r\n//   heading: Personalization POC\r\n//   # to author content in YAML, use _multi-line values_ (prefixed with | + endline)\r\n//   # as long as the same indent is preserved at the beginning of each line, no escaping\r\n//   # is required at all in the value, making it easy to read\r\n//   content: |\r\n//       <p>Thanks for using JSS. Here are some resources to get you started:</p>\r\n\r\n\r\n);\r\n\r\nexport default ContentBlock;","import React from 'react';\n// import { Text } from '@sitecore-jss/sitecore-jss-react';\n\nconst Footer = (props) => (\n<footer className=\"text-muted\">\n  <div className=\"container\">\n    <p className=\"float-right\">\n      <a href=\"#top\">Back to top</a>\n    </p>\n    <p>This is an example of Sitecore JSS site and Bootstrap</p>\n    {/* <p>New to Bootstrap? <a href=\"https://getbootstrap.com/\">Visit the homepage</a> or read our <a href=\"/docs/4.3/getting-started/introduction/\">getting started guide</a>.</p> */}\n  </div>\n</footer>\n);\n\nexport default Footer;\n","import React from 'react';\nimport { Text } from '@sitecore-jss/sitecore-jss-react';\n\nconst Hero = (props) => (\n<main role=\"main\">\n\n<section className=\"jumbotron text-center\">\n  <div className=\"container\">\n    <Text tag=\"h1\" className=\"jumbotron-heading\" field={props.fields.jumbotronHeading} />\n    <Text tag=\"p\" className=\"lead text-muted\" field={props.fields.leadText} />\n    <p>\n      <a href=\"#main\" className=\"btn btn-success my-2\">Learn More</a>\n    </p>\n  </div>\n</section>\n\n</main>\n\n);\n\nexport default Hero;\n","import React from 'react';\n//import { Text } from '@sitecore-jss/sitecore-jss-react';\n\nconst NavBar = (props) => (\n  <div>\n  <header>\n      <div className=\"collapse bg-dark\" id=\"navbarHeader\">\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-sm-8 col-md-7 py-4\">\n              <h4 className=\"text-white\">About</h4>\n              <p className=\"text-muted\">SFF stands for Sitecore Front-end Friends. SFF's mission is to spread awareness about front-end development with the Sitecore Experience Platform, make front-end developers more involved in developing Sitecore applications, as well connecting people to make new friends. We have a strong focus on Sitecore JavaScript Services (JSS), and we are also interested in Sitecore Experience Accelerator (SXA), SPEAK 3, Sitecore Sidekick, and other front-end related technologies.</p>\n            </div>\n            <div className=\"col-sm-4 offset-md-1 py-4\">\n              <h4 className=\"text-white\">Contact</h4>\n              <ul className=\"list-unstyled\">\n                <li><a href=\"https://www.linkedin.com/groups/12276759/\" className=\"text-white\">Follow on Twitter</a></li>\n                <li><a href=\"https://twitter.com/sffcommunity/\" className=\"text-white\">Join LinkedIn Group</a></li>\n              </ul>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"navbar navbar-dark bg-info shadow-sm\">\n        <div className=\"container d-flex justify-content-between\">\n          <a href=\"#hi\" className=\"navbar-brand d-flex align-items-center\">\n            <strong>Personalization Demo</strong>\n          </a>\n          <button \n            className=\"navbar-toggler\" \n            type=\"button\" \n            data-toggle=\"collapse\" \n            data-target=\"#navbarHeader\" \n            aria-controls=\"navbarHeader\" \n            aria-expanded=\"false\" \n            aria-label=\"Toggle navigation\">\n            <span className=\"navbar-toggler-icon\"></span>\n          </button>\n        </div>\n  </div>\n  </header>\n  </div>\n);\n\nexport default NavBar;\n","import React from 'react';\nimport { Image } from '@sitecore-jss/sitecore-jss-react';\n\nconst ThreeCards = (props) => (\n  \n<div className=\"album py-5 bg-light\">\n  <div className=\"container\">\n    <div className=\"row\">\n      <div className=\"col-md-4\">\n        <div className=\"card mb-4 shadow-sm\">\n          <Image\n            field={props.fields.thumbnail}\n            editable={true}\n            className=\"img-object-fit\"\n            height=\"225px\"\n            width=\"100%\"\n            data-sample=\"other-attributes-pass-through\"\n          />\n          {/* <svg className=\"bd-placeholder-img card-img-top\" width=\"100%\" height=\"225\" xmlns=\"http://www.w3.org/2000/svg\" preserveAspectRatio=\"xMidYMid slice\" focusable=\"false\" role=\"img\" aria-label=\"Placeholder: Thumbnail\"><title>Placeholder</title><rect width=\"100%\" height=\"100%\" fill=\"#55595c\"/><text x=\"50%\" y=\"50%\" fill=\"#eceeef\" dy=\".3em\">Thumbnail</text></svg> */}\n          <div className=\"card-body\">\n            <p className=\"card-text\">This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.</p>\n            <div className=\"d-flex justify-content-between align-items-center\">\n              <div className=\"btn-group\">\n                <button type=\"button\" className=\"btn btn-sm btn-info\">View</button>\n              </div>\n              <small className=\"text-muted\">9 mins</small>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"col-md-4\">\n        <div className=\"card mb-4 shadow-sm\">\n        <Image\n            field={props.fields.thumbnail}\n            editable={true}\n            className=\"img-object-fit\"\n            height=\"225px\"\n            width=\"100%\"\n            data-sample=\"other-attributes-pass-through\"\n          />\n          {/* <svg className=\"bd-placeholder-img card-img-top\" width=\"100%\" height=\"225\" xmlns=\"http://www.w3.org/2000/svg\" preserveAspectRatio=\"xMidYMid slice\" focusable=\"false\" role=\"img\" aria-label=\"Placeholder: Thumbnail\"><title>Placeholder</title><rect width=\"100%\" height=\"100%\" fill=\"#55595c\"/><text x=\"50%\" y=\"50%\" fill=\"#eceeef\" dy=\".3em\">Thumbnail</text></svg> */}\n          <div className=\"card-body\">\n            <p className=\"card-text\">This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.</p>\n            <div className=\"d-flex justify-content-between align-items-center\">\n              <div className=\"btn-group\">\n                <button type=\"button\" className=\"btn btn-sm btn-info\">View</button>\n              </div>\n              <small className=\"text-muted\">9 mins</small>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"col-md-4\">\n        <div className=\"card mb-4 shadow-sm\">\n        <Image\n            field={props.fields.thumbnail}\n            editable={true}\n            className=\"img-object-fit\"\n            height=\"225px\"\n            width=\"100%\"\n            data-sample=\"other-attributes-pass-through\"\n          />\n          {/* <svg className=\"bd-placeholder-img card-img-top\" width=\"100%\" height=\"225\" xmlns=\"http://www.w3.org/2000/svg\" preserveAspectRatio=\"xMidYMid slice\" focusable=\"false\" role=\"img\" aria-label=\"Placeholder: Thumbnail\"><title>Placeholder</title><rect width=\"100%\" height=\"100%\" fill=\"#55595c\"/><text x=\"50%\" y=\"50%\" fill=\"#eceeef\" dy=\".3em\">Thumbnail</text></svg> */}\n          <div className=\"card-body\">\n            <p className=\"card-text\">This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.</p>\n            <div className=\"d-flex justify-content-between align-items-center\">\n              <div className=\"btn-group\">\n                <button type=\"button\" className=\"btn btn-sm btn-info\">View</button>\n              </div>\n              <small className=\"text-muted\">9 mins</small>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n    </div>\n  </div>\n</div>\n);\n\nexport default ThreeCards;\n","/* eslint-disable */\n// Do not edit this file, it is auto-generated at build time!\n// See scripts/generate-component-factory.js to modify the generation of this file.\nimport ContentBlock from '../components/ContentBlock';\nimport Footer from '../components/Footer';\nimport Hero from '../components/Hero';\nimport NavBar from '../components/NavBar';\nimport ThreeCards from '../components/ThreeCards';\n\nconst components = new Map();\ncomponents.set('ContentBlock', ContentBlock);\ncomponents.set('Footer', Footer);\ncomponents.set('Hero', Hero);\ncomponents.set('NavBar', NavBar);\ncomponents.set('ThreeCards', ThreeCards);\n\nexport default function componentFactory(componentName) {\n  return components.get(componentName);\n};\n","import { SitecoreContextFactory } from '@sitecore-jss/sitecore-jss-react';\r\n\r\n/*\r\n  The SitecoreContextFactory stores the current Sitecore context for the app.\r\n  For example, whether the page is currently being edited, or the current language.\r\n  Note that the export makes this essentially a singleton, so we can store state in it.\r\n\r\n  The Sitecore context is generally updated on route change (/src/index.js).\r\n  The `withSitecoreContext()` higher order component from `sitecore-jss-react`\r\n  can be used to access the context from within a component.\r\n*/\r\nexport default new SitecoreContextFactory();\r\n","import axios from 'axios';\r\n\r\n/**\r\n * Implements a data fetcher using Axios - replace with your favorite\r\n * SSR-capable HTTP or fetch library if you like. See HttpJsonFetcher<T> type\r\n * in sitecore-jss library for implementation details/notes.\r\n * @param {string} url The URL to request; may include query string\r\n * @param {any} data Optional data to POST with the request.\r\n */\r\nexport function dataFetcher(url, data) {\r\n  return axios({\r\n    url,\r\n    method: data ? 'POST' : 'GET',\r\n    data,\r\n    // note: axios needs to use `withCredentials: true` in order for Sitecore cookies to be included in CORS requests\r\n    // which is necessary for analytics and such\r\n    withCredentials: true,\r\n  });\r\n}\r\n","import React from 'react';\r\nimport { Placeholder, VisitorIdentification } from '@sitecore-jss/sitecore-jss-react';\r\nimport Helmet from 'react-helmet';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport './assets/app.css';\r\nimport './assets/album.css';\r\n\r\nimport \"../node_modules/jquery/dist/jquery.min.js\";\r\n// import \"../node_modules/bootstrap/dist/js/bootstrap.min.js\";\r\n\r\nconst Layout = ({ route }) => (\r\n  <React.Fragment>\r\n    <Helmet>\r\n      <title>\r\n        {(route.fields && route.fields.pageTitle && route.fields.pageTitle.value) || 'Page'}\r\n      </title>\r\n    </Helmet>\r\n       \r\n    <VisitorIdentification />\r\n\r\n      <Placeholder name=\"jss-header\" rendering={route} />\r\n      <Placeholder name=\"jss-content\" rendering={route} />\r\n      <Placeholder name=\"jss-footer\" rendering={route} />\r\n\r\n  </React.Fragment>\r\n);\r\n\r\nexport default Layout;\r\n","import React from 'react';\r\n\r\n// Renders a route-not-found message when no route is available from Sitecore\r\n// The JSS equivalent of a 404 Not Found page.\r\n\r\n// This is invoked from RouteHandler when Sitecore returns no valid route data.\r\n// The NotFound component receives the Layout Service Context data, but no route data.\r\n// This can be used to power parts of your site, such as navigation, from LS context additions\r\n// without losing the ability to render them on your 404 pages :)\r\n\r\nconst NotFound = ({ context = { site: { name: '' }, language: '' } }) => (\r\n  <React.Fragment>\r\n    <h1>Page not found</h1>\r\n    <p>This page does not exist.</p>\r\n    <p>\r\n      Site: {context.site && context.site.name}\r\n      <br />\r\n      Language: {context.language}\r\n    </p>\r\n  </React.Fragment>\r\n);\r\n\r\nexport default NotFound;\r\n","import React from 'react';\r\nimport i18n from 'i18next';\r\nimport Helmet from 'react-helmet';\r\nimport { isExperienceEditorActive, dataApi } from '@sitecore-jss/sitecore-jss-react';\r\nimport SitecoreContextFactory from './lib/SitecoreContextFactory';\r\nimport { dataFetcher } from './dataFetcher';\r\nimport config from './temp/config';\r\nimport Layout from './Layout';\r\nimport NotFound from './NotFound';\r\n\r\n// Dynamic route handler for Sitecore items.\r\n// Because JSS app routes are defined in Sitecore, traditional static React routing isn't enough -\r\n// we need to be able to load dynamic route data from Sitecore after the client side route changes.\r\n// So react-router delegates all route rendering to this handler, which attempts to get the right\r\n// route data from Sitecore - and if none exists, renders the not found component.\r\n\r\nlet ssrInitialState = null;\r\n\r\nexport default class RouteHandler extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      notFound: true,\r\n      routeData: ssrInitialState, // null when client-side rendering\r\n      defaultLanguage: config.defaultLanguage,\r\n    };\r\n\r\n    if (ssrInitialState && ssrInitialState.sitecore && ssrInitialState.sitecore.route) {\r\n      // set the initial sitecore context data if we got SSR initial state\r\n      SitecoreContextFactory.setSitecoreContext({\r\n        route: ssrInitialState.sitecore.route,\r\n        itemId: ssrInitialState.sitecore.route.itemId,\r\n        ...ssrInitialState.sitecore.context,\r\n      });\r\n    }\r\n\r\n    // route data from react-router - if route was resolved, it's not a 404\r\n    if (props.route !== null) {\r\n      this.state.notFound = false;\r\n    }\r\n\r\n    // if we have an initial SSR state, and that state doesn't have a valid route data,\r\n    // then this is a 404 route.\r\n    if (ssrInitialState && (!ssrInitialState.sitecore || !ssrInitialState.sitecore.route)) {\r\n      this.state.notFound = true;\r\n    }\r\n\r\n    // if we have an SSR state, and that state has language data, set the current language\r\n    // (this makes the language of content follow the Sitecore context language cookie)\r\n    // note that a route-based language (i.e. /de-DE) will override this default; this is for home.\r\n    if (ssrInitialState && ssrInitialState.context && ssrInitialState.context.language) {\r\n      this.state.defaultLanguage = ssrInitialState.context.language;\r\n    }\r\n\r\n    // once we initialize the route handler, we've \"used up\" the SSR data,\r\n    // if it existed, so we want to clear it now that it's in react state.\r\n    // future route changes that might destroy/remount this component should ignore any SSR data.\r\n    // EXCEPTION: Unless we are still SSR-ing. Because SSR can re-render the component twice\r\n    // (once to find GraphQL queries that need to run, the second time to refresh the view with\r\n    // GraphQL query results)\r\n    // We test for SSR by checking for Node-specific process.env variable.\r\n    if (typeof window !== 'undefined') {\r\n      ssrInitialState = null;\r\n    }\r\n\r\n    this.componentIsMounted = false;\r\n    this.languageIsChanging = false;\r\n\r\n    // tell i18next to sync its current language with the route language\r\n    this.updateLanguage();\r\n  }\r\n\r\n  componentDidMount() {\r\n    // if no existing routeData is present (from SSR), get Layout Service fetching the route data\r\n    if (!this.state.routeData) {\r\n      this.updateRouteData();\r\n    }\r\n\r\n    this.componentIsMounted = true;\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.componentIsMounted = false;\r\n  }\r\n\r\n  /**\r\n   * Loads route data from Sitecore Layout Service into state.routeData\r\n   */\r\n  updateRouteData() {\r\n    let sitecoreRoutePath = this.props.route.match.params.sitecoreRoute || '/';\r\n    if (!sitecoreRoutePath.startsWith('/')) {\r\n      sitecoreRoutePath = `/${sitecoreRoutePath}`;\r\n    }\r\n\r\n    const language = this.props.route.match.params.lang || this.state.defaultLanguage;\r\n\r\n    // get the route data for the new route\r\n    getRouteData(sitecoreRoutePath, language).then((routeData) => {\r\n      if (routeData !== null && routeData.sitecore && routeData.sitecore.route) {\r\n        // set the sitecore context data and push the new route\r\n        SitecoreContextFactory.setSitecoreContext({\r\n          route: routeData.sitecore.route,\r\n          itemId: routeData.sitecore.route.itemId,\r\n          ...routeData.sitecore.context,\r\n        });\r\n        this.setState({ routeData, notFound: false });\r\n      } else {\r\n        this.setState({ routeData, notFound: true });\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Updates the current app language to match the route data.\r\n   */\r\n  updateLanguage() {\r\n    const newLanguage = this.props.route.match.params.lang || this.state.defaultLanguage;\r\n\r\n    if (i18n.language !== newLanguage) {\r\n      this.languageIsChanging = true;\r\n\r\n      i18n.changeLanguage(newLanguage, () => {\r\n        this.languageIsChanging = false;\r\n\r\n        // if the component is not mounted, we don't care\r\n        // (next time it mounts, it will render with the right language context)\r\n        if (this.componentIsMounted) {\r\n          // after we change the i18n language, we need to force-update React,\r\n          // since otherwise React won't know that the dictionary has changed\r\n          // because it is stored in i18next state not React state\r\n          this.forceUpdate();\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(previousProps) {\r\n    const existingRoute = previousProps.route.match.url;\r\n    const newRoute = this.props.route.match.url;\r\n\r\n    // don't change state (refetch route data) if the route has not changed\r\n    if (existingRoute === newRoute) {\r\n      return;\r\n    }\r\n\r\n    // if in experience editor - force reload instead of route data update\r\n    // avoids confusing Sitecore's editing JS\r\n    if (isExperienceEditorActive()) {\r\n      window.location.assign(newRoute);\r\n      return;\r\n    }\r\n\r\n    this.updateLanguage();\r\n    this.updateRouteData();\r\n  }\r\n\r\n  render() {\r\n    const { notFound, routeData } = this.state;\r\n\r\n    // no route data for the current route in Sitecore - show not found component.\r\n    // Note: this is client-side only 404 handling. Server-side 404 handling is the responsibility\r\n    // of the server being used (i.e. node-headless-ssr-proxy and Sitecore intergrated rendering know how to send 404 status codes).\r\n    if (notFound) {\r\n      return (\r\n        <div>\r\n          <Helmet>\r\n            <title>{i18n.t('Page not found')}</title>\r\n          </Helmet>\r\n          <NotFound context={routeData.sitecore && routeData.sitecore.context} />\r\n        </div>\r\n      );\r\n    }\r\n\r\n    // Don't render anything if the route data or dictionary data is not fully loaded yet.\r\n    // This is a good place for a \"Loading\" component, if one is needed.\r\n    if (!routeData || this.languageIsChanging) {\r\n      return null;\r\n    }\r\n\r\n    // Render the app's root structural layout\r\n    return <Layout route={routeData.sitecore.route} />;\r\n  }\r\n}\r\n\r\n/**\r\n * Sets the initial state provided by server-side rendering.\r\n * Setting this state will bypass initial route data fetch calls.\r\n * @param {object} ssrState\r\n */\r\nexport function setServerSideRenderingState(ssrState) {\r\n  ssrInitialState = ssrState;\r\n}\r\n\r\n/**\r\n * Gets route data from Sitecore. This data is used to construct the component layout for a JSS route.\r\n * @param {string} route Route path to get data for (e.g. /about)\r\n * @param {string} language Language to get route data in (content language, e.g. 'en')\r\n */\r\nfunction getRouteData(route, language) {\r\n  const fetchOptions = {\r\n    layoutServiceConfig: { host: config.sitecoreApiHost },\r\n    querystringParams: { sc_lang: language, sc_apikey: config.sitecoreApiKey },\r\n    fetcher: dataFetcher,\r\n  };\r\n\r\n  return dataApi.fetchRouteData(route, fetchOptions).catch((error) => {\r\n    if (error.response && error.response.status === 404 && error.response.data) {\r\n      return error.response.data;\r\n    }\r\n\r\n    console.error('Route data fetch error', error, error.response);\r\n\r\n    return null;\r\n  });\r\n}\r\n","import React from 'react';\r\nimport { SitecoreContext } from '@sitecore-jss/sitecore-jss-react';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport { ApolloProvider } from 'react-apollo';\r\nimport componentFactory from './temp/componentFactory';\r\nimport SitecoreContextFactory from './lib/SitecoreContextFactory';\r\nimport RouteHandler from './RouteHandler';\r\n\r\n// This is the main JSX entry point of the app invoked by the renderer (server or client rendering).\r\n// By default the app's normal rendering is delegated to <RouteHandler> that handles the loading of JSS route data.\r\n\r\n// support languages in the URL prefix\r\n// e.g. /da-DK/path, or /en/path, or /path\r\nexport const routePatterns = [\r\n  '/:lang([a-z]{2}-[A-Z]{2})/:sitecoreRoute*',\r\n  '/:lang([a-z]{2})/:sitecoreRoute*',\r\n  '/:sitecoreRoute*',\r\n];\r\n\r\n// wrap the app with:\r\n// ApolloProvider: provides an instance of Apollo GraphQL client to the app to make Connected GraphQL queries.\r\n//    Not needed if not using connected GraphQL.\r\n// SitecoreContext: provides component resolution and context services via withSitecoreContext\r\n// Router: provides a basic routing setup that will resolve Sitecore item routes and allow for language URL prefixes.\r\nconst AppRoot = ({ path, Router, graphQLClient }) => {\r\n  const routeRenderFunction = (props) => <RouteHandler route={props} />;\r\n  return (\r\n    <ApolloProvider client={graphQLClient}>\r\n      <SitecoreContext componentFactory={componentFactory} contextFactory={SitecoreContextFactory}>\r\n        <Router location={path} context={{}}>\r\n          <Switch>\r\n            {routePatterns.map((routePattern) => (\r\n              <Route key={routePattern} path={routePattern} render={routeRenderFunction} />\r\n            ))}\r\n          </Switch>\r\n        </Router>\r\n      </SitecoreContext>\r\n    </ApolloProvider>\r\n  );\r\n};\r\n\r\nexport default AppRoot;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport AppRoot from './AppRoot';\r\nimport { setServerSideRenderingState } from './RouteHandler';\r\nimport GraphQLClientFactory from './lib/GraphQLClientFactory';\r\nimport config from './temp/config';\r\nimport i18ninit from './i18n';\r\n\r\n\r\n/* eslint-disable no-underscore-dangle */\r\n\r\nlet renderFunction = ReactDOM.render;\r\n\r\n/*\r\n  SSR Data\r\n  If we're running in a server-side rendering scenario,\r\n  the server will provide JSON in the #__JSS_STATE__ element\r\n  for us to acquire the initial state to run with on the client.\r\n\r\n  This enables us to skip a network request to load up the layout data.\r\n  We are emitting a quiescent script with JSON so that we can take advantage\r\n  of JSON.parse()'s speed advantage over parsing full JS, and enable\r\n  working without needing `unsafe-inline` in Content Security Policies.\r\n\r\n  SSR is initiated from /server/server.js.\r\n*/\r\nlet __JSS_STATE__ = null;\r\nconst ssrRawJson = document.getElementById('__JSS_STATE__');\r\nif (ssrRawJson) {\r\n  __JSS_STATE__ = JSON.parse(ssrRawJson.innerHTML);\r\n}\r\nif (__JSS_STATE__) {\r\n  // push the initial SSR state into the route handler, where it will be used\r\n  setServerSideRenderingState(__JSS_STATE__);\r\n\r\n  // when React initializes from a SSR-based initial state, you need to render with `hydrate` instead of `render`\r\n  renderFunction = ReactDOM.hydrate;\r\n}\r\n\r\n/*\r\n  GraphQL Data\r\n  The Apollo Client needs to be initialized to make GraphQL available to the JSS app.\r\n  Not using GraphQL? Remove this, and the ApolloContext from `AppRoot`.\r\n*/\r\n// Apollo supports SSR of GraphQL queries, so like JSS SSR, it has an object we can pre-hydrate the client cache from\r\n// to avoid needing to re-run GraphQL queries after the SSR page loads\r\nconst initialGraphQLState =\r\n  __JSS_STATE__ && __JSS_STATE__.APOLLO_STATE ? __JSS_STATE__.APOLLO_STATE : null;\r\n\r\nconst graphQLClient = GraphQLClientFactory(config.graphQLEndpoint, false, initialGraphQLState);\r\n\r\n/*\r\n  App Rendering\r\n*/\r\n// initialize the dictionary, then render the app\r\n// note: if not making a multlingual app, the dictionary init can be removed.\r\ni18ninit().then(() => {\r\n  // HTML element to place the app into\r\n  const rootElement = document.getElementById('root');\r\n\r\n  renderFunction(\r\n    <AppRoot\r\n      path={window.location.pathname}\r\n      Router={BrowserRouter}\r\n      graphQLClient={graphQLClient}\r\n    />,\r\n    rootElement\r\n  );\r\n});\r\n","import i18n from 'i18next';\r\nimport fetchBackend from 'i18next-fetch-backend';\r\nimport { reactI18nextModule } from 'react-i18next';\r\nimport config from './temp/config';\r\n\r\n/**\r\n * Initializes the i18next library to provide a translation dictionary to the app.\r\n * If your app is not multilingual, this file and references to it can be removed.\r\n * Elsewhere in the app to use the dictionary `import { t } from 'i18next'; ... t('key')`\r\n * @param {string} language Optional, the initial language. Only used for SSR; otherwise language set in RouteHandler.\r\n * @param {*} dictionary Optional, the dictionary to load. Only used for SSR; otherwise, the dictionary is loaded via JSS dictionary service.\r\n */\r\nexport default function i18nInit(language, dictionary) {\r\n  return new Promise((resolve, reject) => {\r\n    const options = {\r\n      debug: false,\r\n      lng: language,\r\n      fallbackLng: false, // fallback to keys\r\n      load: 'currentOnly', // e.g. don't load 'es' when requesting 'es-MX' -- Sitecore config should handle this\r\n      useCookie: false, // using URLs and Sitecore to store language context, don't need a cookie\r\n\r\n      interpolation: {\r\n        escapeValue: false, // not needed for react\r\n      },\r\n    };\r\n\r\n    if (dictionary) {\r\n      // if we got dictionary passed, that means we're in a SSR context with a server-provided dictionary\r\n      // so we do not want a backend, because we already know all possible keys\r\n      options.resources = {};\r\n      options.resources[language] = {\r\n        translation: dictionary,\r\n      };\r\n\r\n      i18n.use(reactI18nextModule).init(options, (error) => {\r\n        if (error) reject(error);\r\n        resolve();\r\n      });\r\n    } else {\r\n      // We're running client-side, so we get translation data from the Sitecore dictionary API using fetch backend\r\n      // For higher performance (but less simplicity), consider adding the i18n chained backend to a local cache option like the local storage backend.\r\n\r\n      // eslint-disable-next-line prettier/prettier\r\n      const dictionaryServicePath = `${config.sitecoreApiHost}/sitecore/api/jss/dictionary/${config.jssAppName}/{{lng}}?sc_apikey=${config.sitecoreApiKey}`;\r\n\r\n      options.backend = {\r\n        loadPath: dictionaryServicePath,\r\n        parse: (data) => {\r\n          const parsedData = JSON.parse(data);\r\n          if (parsedData.phrases) {\r\n            return parsedData.phrases;\r\n          }\r\n          return parsedData;\r\n        },\r\n      };\r\n\r\n      i18n\r\n        .use(fetchBackend)\r\n        .use(reactI18nextModule)\r\n        .init(options, (error) => {\r\n          if (error) reject(error);\r\n\r\n          resolve();\r\n        });\r\n    }\r\n  });\r\n}\r\n","/* eslint-disable import/first */\r\n\r\nimport 'isomorphic-fetch';\r\nimport { ApolloClient } from 'apollo-client';\r\nimport { InMemoryCache, IntrospectionFragmentMatcher } from 'apollo-cache-inmemory';\r\n\r\n/*\r\n  INTROSPECTION DATA\r\n  See https://www.apollographql.com/docs/react/recipes/fragment-matching.html\r\n  This enables the Apollo cache to process fragments on interface types correctly.\r\n  If this file does not exist, you may need to run the `jss graphql:update` script.\r\n*/\r\nimport introspectionQueryResultData from '../temp/GraphQLFragmentTypes.json';\r\n\r\n/*\r\n  QUERY LINK SELECTION\r\n  A link is transport which GraphQL queries are pushed across.\r\n  You have many choices.\r\n  See the apollo-link documentation for more details.\r\n\r\n  NOTE: to use Sitecore Experience Editor it is essential that your\r\n  link passes cookies along with requests (credentials: 'include').\r\n*/\r\n\r\n// choose between a basic HTTP link to run queries...\r\n// import { createHttpLink } from 'apollo-link-http';\r\n// const link = createHttpLink({ uri: endpoint, credentials: 'include' });\r\n\r\n// ...or a batched link (multiple queries within 10ms all go in one HTTP request)\r\nimport { BatchHttpLink } from 'apollo-link-batch-http';\r\n\r\n// ...and an automatic persisted query link, which reduces bandwidth by using query hashes to alias content\r\n// the APQ link is _chained_ behind another link that performs the actual HTTP calls, so you can choose\r\n// APQ + batched, or APQ + http links for example.\r\nimport { createPersistedQueryLink } from 'apollo-link-persisted-queries';\r\n\r\nexport default function(endpoint, ssr, initialCacheState) {\r\n  /* HTTP link selection: default to batched + APQ */\r\n  const link = createPersistedQueryLink().concat(\r\n    new BatchHttpLink({ uri: endpoint, credentials: 'include' })\r\n  );\r\n\r\n  const cache = new InMemoryCache({\r\n    fragmentMatcher: new IntrospectionFragmentMatcher({\r\n      introspectionQueryResultData,\r\n    }),\r\n  });\r\n\r\n  return new ApolloClient({\r\n    ssrMode: ssr,\r\n    ssrForceFetchDelay: 100,\r\n    link,\r\n    cache: cache.restore(initialCacheState),\r\n  });\r\n}\r\n","/* eslint-disable */\n// Do not edit this file, it is auto-generated at build time!\n// See scripts/bootstrap.js to modify the generation of this file.\nmodule.exports = {\n  \"sitecoreApiKey\": \"{4E9FC5C3-FC21-4B93-8BF8-4612B95968FA}\",\n  \"sitecoreApiHost\": \"http://localhost:5000\",\n  \"jssAppName\": \"jss-personalization-poc\",\n  \"defaultLanguage\": \"en\",\n  \"graphQLEndpointPath\": \"/api/jss-personalization-poc\",\n  \"graphQLEndpoint\": \"http://localhost:5000/api/jss-personalization-poc?sc_apikey={4E9FC5C3-FC21-4B93-8BF8-4612B95968FA}\"\n};"],"sourceRoot":""}